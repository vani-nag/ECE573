; Symbol table GLOBAL
; name a type INT location 0x20000000
; name b type FLOAT location 0x20000004
; name c type FLOAT location 0x20000008
; Function: INT main([])

; Symbol table main

In AssignNode left temp = $gb
In BinaryOpNode type = ADD
In BinaryOpNode inst = FADD.S $f1, $gb, 1.0
In AssignNode left temp = $gc
In AssignNode left temp = $ga
Instruction List
FMV.S $gb, 2.5
FADD.S $f1, $gb, 1.0
FMV.S $gc, $f1
MV $ga, 2
PUTF $gc
PUTI $ga
MV $l8, $ga
J func_ret_main


HashMap
[$ga, $gb, $gc]	
[$ga, $gb, $gc]	
[$ga, $gb, $gc]	
[$ga, $gb, $gc]	
[$ga, $gb, $gc]	
[$gb, $gc]	
[$gb, $f1]	
0 [$gb]

1 [$gb, $f1]

2 [$gb, $gc]

3 [$ga, $gb, $gc]

4 [$ga, $gb, $gc]

5 [$ga, $gb, $gc]

6 [$ga, $gb, $gc]

7 [$ga, $gb, $gc]


Instruction :FMV.S $gb, 2.5
Allocate: this.src1Reg null
Freed: 2.5 in f0
Allocate: this.src1Reg null

Instruction :FADD.S $f1, $gb, 1.0
Allocate: this.src1Reg $gb
Freed: 1.0 in f1
Allocate: this.src1Reg *

Instruction :FMV.S $gc, $f1
Freed: $f1 in f1
Allocate: this.src1Reg *

Instruction :MV $ga, 2
Allocate: this.src1Reg *
empty spot
4
allocated index 4 allocated value 2
freeing: 4
Freed: 2 in x4
Allocate: this.src1Reg *
empty spot
4

Instruction :PUTF $gc

Instruction :PUTI $ga
ENSURE: Int reg list
[no, no, no, address, $ga, empty, empty, empty, no]

Instruction :MV $l8, $ga
ENSURE: Int reg list
[no, no, no, address, $ga, empty, empty, empty, no]
Allocate: this.src1Reg *
empty spot
5

Instruction :J func_ret_main
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$ga
Saving $ga
x5 =$l8
x6 =empty
x7 =empty
x8 =no
FnNode body: FMV.S $gb, 2.5
FADD.S $f1, $gb, 1.0
FMV.S $gc, $f1
MV $ga, 2
PUTF $gc
PUTI $ga
MV $l8, $ga
J func_ret_main

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT
;
func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, 0
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
FSW f0, 0(sp)
ADDI sp, sp, -4
FSW f1, 0(sp)
ADDI sp, sp, -4
FIMM.S f0, 2.5
FMV.S f0, f0
FIMM.S f1, 1.0
FADD.S f1, f0, f1
FMV.S f1, f1
LI x4, 2
MV x4, x4
PUTF f1
PUTI x4
MV x5, x4
LA x3, 0x20000004
FSW f0, 0(x3)
LA x3, 0x20000008
FSW f1, 0(x3)
LA x3, 0x20000000
SW x4, 0(x3)
SW x5, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
FLW f1, 0(sp)
ADDI sp, sp, 4
FLW f0, 0(sp)
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;


.section .strings
