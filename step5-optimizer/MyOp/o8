; Symbol table GLOBAL
; name welcome type STRING location 0x10000000 value "Compute GCD(x, y) using Euclid's algorithm \n"
; name xprompt type STRING location 0x10000004 value "Enter x: "
; name yprompt type STRING location 0x10000008 value "Enter y: "
; name result type STRING location 0x1000000c value "GCD(x, y) = "
; name x type INT location 0x20000000
; name y type INT location 0x20000004
; name mod type INT location 0x20000008
; name tmp type INT location 0x2000000c
; name prompt type STRING location 0x10000010 value "Enter a number: "
; Function: INT main([])

; Symbol table main

In AssignNode left temp = $gtmp
In AssignNode left temp = $gx
In AssignNode left temp = $gy
In BinaryOpNode type = SUB
In BinaryOpNode inst = SUB $t1, $gx, $gy
In AssignNode left temp = $gx
Instruction List
PUTS $gwelcome
PUTS $gxprompt
GETI $gx
PUTS $gyprompt
GETI $gy


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gmod, $gtmp, $gprompt]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gmod, $gtmp, $gprompt]

2 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]

3 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]

4 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :PUTS $gwelcome
came to puts

Instruction :PUTS $gxprompt
came to puts

Instruction :GETI $gx
Allocate: this.src1Reg null
empty spot
4

Instruction :PUTS $gyprompt
came to puts

Instruction :GETI $gy
Allocate: this.src1Reg null
empty spot
5
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
Saving $gx
x5 =$gy
Saving $gy
x6 =empty
x7 =empty
x8 =no
Instruction List
loop_2:
BEQ $gx, 0, out_3


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :loop_2:

Instruction :BEQ $gx, 0, out_3
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx
Allocate: this.src1Reg $gx
empty spot
5
allocated index 5 allocated value 0
freeing: 5
Freed: 0 in x5
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
BGT $gx, $gy, out_1


HashMap
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :BGT $gx, $gy, out_1
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx
Allocate: this.src1Reg $gx
empty spot
5
allocated index 5 allocated value $gy
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
x5 =$gy
x6 =empty
x7 =empty
x8 =no
Instruction List
MV $gtmp, $gx
MV $gx, $gy
MV $gy, $gtmp


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gmod, $gtmp, $gprompt, $gy]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gmod, $gtmp, $gprompt]

2 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :MV $gtmp, $gx
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx
freeing: 4
Freed: $gx in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :MV $gx, $gy
Allocate: this.src1Reg null
empty spot
5
allocated index 5 allocated value $gy
freeing: 5
Freed: $gy in x5
Allocate: this.src1Reg null
empty spot
5

Instruction :MV $gy, $gtmp
ENSURE: Int reg list
[no, no, no, address, $gtmp, $gx, empty, empty, no]
Allocate: this.src1Reg null
empty spot
6
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gtmp
Saving $gtmp
x5 =$gx
Saving $gx
x6 =$gy
Saving $gy
x7 =empty
x8 =no
Instruction List
out_1:


HashMap
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :out_1:
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =empty
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
loop_1:
BLT $gx, $gy, out_2


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :loop_1:

Instruction :BLT $gx, $gy, out_2
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx
Allocate: this.src1Reg $gx
empty spot
5
allocated index 5 allocated value $gy
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
x5 =$gy
x6 =empty
x7 =empty
x8 =no
Instruction List
SUB $t1, $gx, $gy
MV $gx, $t1
J loop_1


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gy, $gmod, $gtmp, $gprompt, $t1]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

2 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :SUB $t1, $gx, $gy
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx
Allocate: this.src1Reg $gx
empty spot
5
allocated index 5 allocated value $gy
freeing: 4
Freed: $gx in x4
Allocate: this.src1Reg *
empty spot
4

Instruction :MV $gx, $t1
ENSURE: Int reg list
[no, no, no, address, $t1, $gy, empty, empty, no]
freeing: 4
Freed: $t1 in x4
Allocate: this.src1Reg *
empty spot
4

Instruction :J loop_1
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
Saving $gx
x5 =$gy
x6 =empty
x7 =empty
x8 =no
Instruction List
out_2:
PUTI $gx
PUTI $gy
J loop_2


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

2 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

3 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :out_2:

Instruction :PUTI $gx
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gx

Instruction :PUTI $gy
Allocate: this.src1Reg null
empty spot
5
allocated index 5 allocated value $gy

Instruction :J loop_2
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gx
x5 =$gy
x6 =empty
x7 =empty
x8 =no
Instruction List
out_3:
PUTS $gresult
PUTI $gy
MV $l8, 0
J func_ret_main


HashMap
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
[$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]	
0 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

1 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

2 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

3 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]

4 [$gwelcome, $gxprompt, $gyprompt, $gresult, $gx, $gy, $gmod, $gtmp, $gprompt]


Instruction :out_3:

Instruction :PUTS $gresult
came to puts

Instruction :PUTI $gy
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gy

Instruction :MV $l8, 0
Allocate: this.src1Reg null
empty spot
5
allocated index 5 allocated value 0
freeing: 5
Freed: 0 in x5
Allocate: this.src1Reg null
empty spot
5

Instruction :J func_ret_main
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gy
x5 =$l8
x6 =empty
x7 =empty
x8 =no
FnNode body: PUTS $gwelcome
PUTS $gxprompt
GETI $gx
PUTS $gyprompt
GETI $gy
loop_2:
BEQ $gx, 0, out_3
BGT $gx, $gy, out_1
MV $gtmp, $gx
MV $gx, $gy
MV $gy, $gtmp
out_1:
loop_1:
BLT $gx, $gy, out_2
SUB $t1, $gx, $gy
MV $gx, $t1
J loop_1
out_2:
PUTI $gx
PUTI $gy
J loop_2
out_3:
PUTS $gresult
PUTI $gy
MV $l8, 0
J func_ret_main

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT
;
func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, 0
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
SW x6, 0(sp)
ADDI sp, sp, -4
LA x3, 0x10000000
PUTS x3
LA x3, 0x10000004
PUTS x3
GETI x4
LA x3, 0x10000008
PUTS x3
GETI x5
LA x3, 0x20000000
SW x4, 0(x3)
LA x3, 0x20000004
SW x5, 0(x3)
loop_2:
LA x3, 0x20000000
LW x4, 0(x3)
LI x5, 0
BEQ x4, x5, out_3
LA x3, 0x20000000
LW x4, 0(x3)
LA x3, 0x20000004
LW x5, 0(x3)
BGT x4, x5, out_1
LA x3, 0x20000000
LW x4, 0(x3)
MV x4, x4
LA x3, 0x20000004
LW x5, 0(x3)
MV x5, x5
MV x6, x4
LA x3, 0x2000000c
SW x4, 0(x3)
LA x3, 0x20000000
SW x5, 0(x3)
LA x3, 0x20000004
SW x6, 0(x3)
out_1:
loop_1:
LA x3, 0x20000000
LW x4, 0(x3)
LA x3, 0x20000004
LW x5, 0(x3)
BLT x4, x5, out_2
LA x3, 0x20000000
LW x4, 0(x3)
LA x3, 0x20000004
LW x5, 0(x3)
SUB x4, x4, x5
MV x4, x4
LA x3, 0x20000000
SW x4, 0(x3)
J loop_1
out_2:
LA x3, 0x20000000
LW x4, 0(x3)
PUTI x4
LA x3, 0x20000004
LW x5, 0(x3)
PUTI x5
J loop_2
out_3:
LA x3, 0x1000000c
PUTS x3
LA x3, 0x20000004
LW x4, 0(x3)
PUTI x4
LI x5, 0
MV x5, x5
SW x5, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
LW x6, 0(sp)
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;


.section .strings
0x10000000 "Compute GCD(x, y) using Euclid's algorithm \n"
0x10000004 "Enter x: "
0x10000008 "Enter y: "
0x1000000c "GCD(x, y) = "
0x10000010 "Enter a number: "
