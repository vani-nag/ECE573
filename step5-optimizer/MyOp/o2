; Symbol table GLOBAL
; Function: INT fact([INT])
; Function: INT main([])

; Symbol table main
; name res type INT location -4

; Symbol table fact
; name n type INT location 12

Ret val: $t1
In AssignNode left temp = $l-4
Instruction List
PUSH 5
ADDI sp, sp, -4
ADDI sp, sp, -4
PUSH ra
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
POPINT ra
ADDI sp, sp, 4
POPINT $t1
ADDI sp, sp, 4
MV $l-4, $t1
PUTI $l-4
MV $l8, 0
J func_ret_main


HashMap
[$l-4]	
[$l-4]	
[$l-4]	
[$l-4]	
[$t1]	
[$t1]	
[]	
[]	
[]	
[]	
[]	
[]	
[]	
[]	
0 []

1 []

2 []

3 []

4 []

5 []

6 []

7 []

8 []

9 [$t1]

10 [$t1]

11 [$l-4]

12 [$l-4]

13 [$l-4]

14 [$l-4]


Instruction :PUSH 5
pushint: src1= 5
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value 5
freeing: 4
Freed: 5 in x4

Instruction :ADDI sp, sp, -4

Instruction :ADDI sp, sp, -4

Instruction :PUSH ra
pushint: src1= ra

Instruction :ADDI sp, sp, -4

Instruction :JR func_fact

Instruction :ADDI sp, sp, 4

Instruction :POPINT ra

Instruction :ADDI sp, sp, 4

Instruction :POPINT $t1
Allocate: this.src1Reg null
empty spot
4

Instruction :ADDI sp, sp, 4

Instruction :MV $l-4, $t1
ENSURE: Int reg list
[no, no, no, address, $t1, empty, empty, empty, no]
freeing: 4
Freed: $t1 in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :PUTI $l-4
ENSURE: Int reg list
[no, no, no, address, $l-4, empty, empty, empty, no]

Instruction :MV $l8, 0
Allocate: this.src1Reg null
empty spot
5
allocated index 5 allocated value 0
freeing: 5
Freed: 0 in x5
Allocate: this.src1Reg null
empty spot
5

Instruction :J func_ret_main
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l-4
x5 =$l8
x6 =empty
x7 =empty
x8 =no
FnNode body: PUSH 5
ADDI sp, sp, -4
ADDI sp, sp, -4
PUSH ra
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
POPINT ra
ADDI sp, sp, 4
POPINT $t1
ADDI sp, sp, 4
MV $l-4, $t1
PUTI $l-4
MV $l8, 0
J func_ret_main

In BinaryOpNode type = SUB
In BinaryOpNode inst = SUB $t1, $l12, 1
Ret val: $t2
In BinaryOpNode type = MUL
In BinaryOpNode inst = MUL $t3, $l12, $t2
Instruction List
BGT $l12, 1, else_1


HashMap
0 [$l12]


Instruction :BGT $l12, 1, else_1
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $l12
Allocate: this.src1Reg $l12
empty spot
5
allocated index 5 allocated value 1
freeing: 5
Freed: 1 in x5
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l12
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
MV $l8, 1
J func_ret_fact


HashMap
[$l12]	
0 [$l12]

1 [$l12]


Instruction :MV $l8, 1
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value 1
freeing: 4
Freed: 1 in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :J func_ret_fact
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l8
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
J out_1


HashMap
0 [$l12]


Instruction :J out_1
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =empty
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
else_1:
SUB $t1, $l12, 1
PUSH $t1
ADDI sp, sp, -4
ADDI sp, sp, -4
PUSH ra
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
POPINT ra
ADDI sp, sp, 4
POPINT $t2
ADDI sp, sp, 4
MUL $t3, $l12, $t2
MV $l8, $t3
J func_ret_fact


HashMap
[$l12]	
[$l12]	
[$l12, $t3]	
[$l12, $t2]	
[$l12, $t2]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12]	
[$l12, $t1]	
0 [$l12]

1 [$l12, $t1]

2 [$l12]

3 [$l12]

4 [$l12]

5 [$l12]

6 [$l12]

7 [$l12]

8 [$l12]

9 [$l12]

10 [$l12]

11 [$l12, $t2]

12 [$l12, $t2]

13 [$l12, $t3]

14 [$l12]

15 [$l12]


Instruction :else_1:

Instruction :SUB $t1, $l12, 1
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $l12
Allocate: this.src1Reg $l12
empty spot
5
allocated index 5 allocated value 1
freeing: 5
Freed: 1 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :PUSH $t1
pushint: src1= $t1
ENSURE: Int reg list
[no, no, no, address, $l12, $t1, empty, empty, no]
freeing: 5
Freed: $t1 in x5

Instruction :ADDI sp, sp, -4

Instruction :ADDI sp, sp, -4

Instruction :PUSH ra
pushint: src1= ra

Instruction :ADDI sp, sp, -4

Instruction :JR func_fact

Instruction :ADDI sp, sp, 4

Instruction :POPINT ra

Instruction :ADDI sp, sp, 4

Instruction :POPINT $t2
Allocate: this.src1Reg *
empty spot
5

Instruction :ADDI sp, sp, 4

Instruction :MUL $t3, $l12, $t2
ENSURE: Int reg list
[no, no, no, address, $l12, $t2, empty, empty, no]
ENSURE: Int reg list
[no, no, no, address, $l12, $t2, empty, empty, no]
freeing: 5
Freed: $t2 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :MV $l8, $t3
ENSURE: Int reg list
[no, no, no, address, $l12, $t3, empty, empty, no]
freeing: 5
Freed: $t3 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :J func_ret_fact
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l12
x5 =$l8
x6 =empty
x7 =empty
x8 =no
Instruction List
out_1:


HashMap
0 [$l12]


Instruction :out_1:
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =empty
x5 =empty
x6 =empty
x7 =empty
x8 =no
FnNode body: BGT $l12, 1, else_1
MV $l8, 1
J func_ret_fact
J out_1
else_1:
SUB $t1, $l12, 1
PUSH $t1
ADDI sp, sp, -4
ADDI sp, sp, -4
PUSH ra
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
POPINT ra
ADDI sp, sp, 4
POPINT $t2
ADDI sp, sp, 4
MUL $t3, $l12, $t2
MV $l8, $t3
J func_ret_fact
out_1:

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT
;
func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, -4
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
LI x4, 5
SW x4, 0(sp)
ADDI sp, sp, -4
ADDI sp, sp, -4
SW ra, 0(sp)
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
LW ra, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
ADDI sp, sp, 4
MV x4, x4
PUTI x4
LI x5, 0
MV x5, x5
SW x4, -4(fp)
SW x5, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;
func_fact:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, 0
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
LW x4, 12(fp)
LI x5, 1
BGT x4, x5, else_1
LI x4, 1
MV x4, x4
SW x4, 8(fp)
J func_ret_fact
J out_1
else_1:
LW x4, 12(fp)
LI x5, 1
SUB x5, x4, x5
SW x5, 0(sp)
ADDI sp, sp, -4
ADDI sp, sp, -4
SW ra, 0(sp)
ADDI sp, sp, -4
JR func_fact
ADDI sp, sp, 4
LW ra, 0(sp)
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
MUL x5, x4, x5
MV x5, x5
SW x5, 8(fp)
J func_ret_fact
out_1:
func_ret_fact:
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;


.section .strings
