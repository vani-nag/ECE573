Found SHADOW adding FLOAT a
; Symbol table GLOBAL
; name true type STRING location 0x10000000 value "True\n"
; name false type STRING location 0x10000004 value "False\n"
; name a type FLOAT location 0x20000000
; name b type FLOAT location 0x20000004
; Function: INT main([])
; Function: FLOAT foo([INT, FLOAT])

; Symbol table main
; name c type INT location -4
; name d type INT location -8

; Symbol table foo
; name y type FLOAT location 12
; name x type INT location 16
; name d type INT location -4
; name f type FLOAT location -8
; name a type FLOAT location -12

In AssignNode left temp = $ga
In AssignNode left temp = $gb
In AssignNode left temp = $l-4
In BinaryOpNode type = MUL
In BinaryOpNode inst = MUL $t1, $l-4, 2
In AssignNode left temp = $l-8
Instruction List
FMV.S $ga, 3.0
FMV.S $gb, 2.0
MV $l-4, 7
MUL $t1, $l-4, 2
MV $l-8, $t1
FLT.S $t2, $ga, $gb
BNE $t2, x0, else_1


HashMap
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb, $t2]	
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
[$l-4, $gtrue, $gfalse, $ga, $gb, $t1]	
[$l-4, $gtrue, $gfalse, $ga, $gb]	
[$gtrue, $gfalse, $ga, $gb]	
0 [$gtrue, $gfalse, $ga]

1 [$gtrue, $gfalse, $ga, $gb]

2 [$l-4, $gtrue, $gfalse, $ga, $gb]

3 [$l-4, $gtrue, $gfalse, $ga, $gb, $t1]

4 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

5 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb, $t2]

6 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]


Instruction :FMV.S $ga, 3.0
Allocate: this.src1Reg null
Freed: 3.0 in f0
Allocate: this.src1Reg null

Instruction :FMV.S $gb, 2.0
Allocate: this.src1Reg null
Freed: 2.0 in f1
Allocate: this.src1Reg null

Instruction :MV $l-4, 7
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value 7
freeing: 4
Freed: 7 in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :MUL $t1, $l-4, 2
ENSURE: Int reg list
[no, no, no, address, $l-4, empty, empty, empty, no]
Allocate: this.src1Reg $l-4
empty spot
5
allocated index 5 allocated value 2
freeing: 5
Freed: 2 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :MV $l-8, $t1
ENSURE: Int reg list
[no, no, no, address, $l-4, $t1, empty, empty, no]
freeing: 5
Freed: $t1 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :FLT.S $t2, $ga, $gb
Allocate: this.src1Reg *
empty spot
6

Instruction :BNE $t2, x0, else_1
ENSURE: Int reg list
[no, no, no, address, $l-4, $l-8, $t2, empty, no]
freeing: 6
Freed: $t2 in x6
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l-4
x5 =$l-8
x6 =empty
x7 =empty
x8 =no
Instruction List
PUTI $l-8
PUTS $gtrue
J out_1


HashMap
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
0 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

1 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

2 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]


Instruction :PUTI $l-8
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $l-8

Instruction :PUTS $gtrue
came to puts

Instruction :J out_1
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l-8
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
else_1:
PUTI $l-8
PUTS $gfalse


HashMap
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
0 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

1 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

2 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]


Instruction :else_1:

Instruction :PUTI $l-8
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $l-8

Instruction :PUTS $gfalse
came to puts
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l-8
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
out_1:
MV $l8, 0
J func_ret_main


HashMap
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
[$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]	
0 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

1 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]

2 [$l-4, $l-8, $gtrue, $gfalse, $ga, $gb]


Instruction :out_1:

Instruction :MV $l8, 0
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value 0
freeing: 4
Freed: 0 in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :J func_ret_main
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l8
x5 =empty
x6 =empty
x7 =empty
x8 =no
FnNode body: FMV.S $ga, 3.0
FMV.S $gb, 2.0
MV $l-4, 7
MUL $t1, $l-4, 2
MV $l-8, $t1
FLT.S $t2, $ga, $gb
BNE $t2, x0, else_1
PUTI $l-8
PUTS $gtrue
J out_1
else_1:
PUTI $l-8
PUTS $gfalse
out_1:
MV $l8, 0
J func_ret_main

In BinaryOpNode type = ADD
In BinaryOpNode inst = FADD.S $f1, $l12, $l16
Instruction List
FADD.S $f1, $l12, $l16
FMV.S $l8, $f1
J func_ret_foo


HashMap
[$l12, $l16, $l-4, $l-8, $l-12, $gtrue, $gfalse, $ga, $gb]	
[$l12, $l16, $l-4, $l-8, $l-12, $gtrue, $gfalse, $ga, $gb]	
0 [$l12, $l16, $l-4, $l-8, $l-12, $gtrue, $gfalse, $ga, $gb, $f1]

1 [$l12, $l16, $l-4, $l-8, $l-12, $gtrue, $gfalse, $ga, $gb]

2 [$l12, $l16, $l-4, $l-8, $l-12, $gtrue, $gfalse, $ga, $gb]


Instruction :FADD.S $f1, $l12, $l16
Allocate: this.src1Reg null
Allocate: this.src1Reg $l12
Allocate: this.src1Reg *

Instruction :FMV.S $l8, $f1
Freed: $f1 in f2
Allocate: this.src1Reg *

Instruction :J func_ret_foo
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =empty
x5 =empty
x6 =empty
x7 =empty
x8 =no
FnNode body: FADD.S $f1, $l12, $l16
FMV.S $l8, $f1
J func_ret_foo

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT
;
func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, -8
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
SW x6, 0(sp)
ADDI sp, sp, -4
FSW f0, 0(sp)
ADDI sp, sp, -4
FSW f1, 0(sp)
ADDI sp, sp, -4
FIMM.S f0, 3.0
FMV.S f0, f0
FIMM.S f1, 2.0
FMV.S f1, f1
LI x4, 7
MV x4, x4
LI x5, 2
MUL x5, x4, x5
MV x5, x5
FLT.S x6, f0, f1
LA x3, 0x20000000
FSW f0, 0(x3)
LA x3, 0x20000004
FSW f1, 0(x3)
SW x4, -4(fp)
SW x5, -8(fp)
BNE x6, x0, else_1
LW x4, -8(fp)
PUTI x4
LA x3, 0x10000000
PUTS x3
J out_1
else_1:
LW x4, -8(fp)
PUTI x4
LA x3, 0x10000004
PUTS x3
out_1:
LI x4, 0
MV x4, x4
SW x4, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
FLW f1, 0(sp)
ADDI sp, sp, 4
FLW f0, 0(sp)
ADDI sp, sp, 4
LW x6, 0(sp)
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;
func_foo:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, -12
FSW f0, 0(sp)
ADDI sp, sp, -4
FSW f1, 0(sp)
ADDI sp, sp, -4
FSW f2, 0(sp)
ADDI sp, sp, -4
FLW f0, 12(fp)
FLW f1, 16(fp)
FADD.S f2, f0, f1
FMV.S f2, f2
FSW f2, 8(fp)
J func_ret_foo
func_ret_foo:
ADDI sp, sp, 4
FLW f2, 0(sp)
ADDI sp, sp, 4
FLW f1, 0(sp)
ADDI sp, sp, 4
FLW f0, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;


.section .strings
0x10000000 "True\n"
0x10000004 "False\n"
