; Symbol table GLOBAL
; name a type INT location 0x20000000
; name b type INT location 0x20000004
; name s type STRING location 0x10000000 value "Enter a number "
; name found type STRING location 0x10000004 value "Found!\n"
; Function: INT main([])

; Symbol table main

In BinaryOpNode type = MUL
In BinaryOpNode inst = MUL $t1, 2, $ga
In AssignNode left temp = $gb
In BinaryOpNode type = SUB
In BinaryOpNode inst = SUB $t2, $gb, 1
In AssignNode left temp = $gb
Instruction List
PUTS $gs
GETI $ga
MUL $t1, 2, $ga
MV $gb, $t1


HashMap
[$ga, $gb, $gs, $gfound]	
[$ga, $gs, $gfound, $t1]	
[$ga, $gs, $gfound]	
0 [$gs, $gfound]

1 [$ga, $gs, $gfound]

2 [$ga, $gs, $gfound, $t1]

3 [$ga, $gb, $gs, $gfound]


Instruction :PUTS $gs
came to puts

Instruction :GETI $ga
Allocate: this.src1Reg null
empty spot
4

Instruction :MUL $t1, 2, $ga
Allocate: this.src1Reg null
empty spot
5
allocated index 5 allocated value 2
ENSURE: Int reg list
[no, no, no, address, $ga, 2, empty, empty, no]
freeing: 5
Freed: 2 in x5
Allocate: this.src1Reg *
empty spot
5

Instruction :MV $gb, $t1
ENSURE: Int reg list
[no, no, no, address, $ga, $t1, empty, empty, no]
freeing: 5
Freed: $t1 in x5
Allocate: this.src1Reg *
empty spot
5
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$ga
Saving $ga
x5 =$gb
Saving $gb
x6 =empty
x7 =empty
x8 =no
Instruction List
loop_1:
BLE $gb, 0, out_2


HashMap
[$ga, $gb, $gs, $gfound]	
0 [$ga, $gb, $gs, $gfound]

1 [$ga, $gb, $gs, $gfound]


Instruction :loop_1:

Instruction :BLE $gb, 0, out_2
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gb
Allocate: this.src1Reg $gb
empty spot
5
allocated index 5 allocated value 0
freeing: 5
Freed: 0 in x5
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gb
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
PUTI $gb
BNE $gb, $ga, out_1


HashMap
[$ga, $gb, $gs, $gfound]	
0 [$ga, $gb, $gs, $gfound]

1 [$ga, $gb, $gs, $gfound]


Instruction :PUTI $gb
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gb

Instruction :BNE $gb, $ga, out_1
ENSURE: Int reg list
[no, no, no, address, $gb, empty, empty, empty, no]
Allocate: this.src1Reg $gb
empty spot
5
allocated index 5 allocated value $ga
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gb
x5 =$ga
x6 =empty
x7 =empty
x8 =no
Instruction List
PUTS $gfound


HashMap
0 [$ga, $gb, $gs, $gfound]


Instruction :PUTS $gfound
came to puts
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =empty
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
out_1:
SUB $t2, $gb, 1
MV $gb, $t2
J loop_1


HashMap
[$ga, $gb, $gs, $gfound]	
[$ga, $gb, $gs, $gfound]	
[$ga, $gs, $gfound, $t2]	
0 [$ga, $gs, $gfound, $gb]

1 [$ga, $gs, $gfound, $t2]

2 [$ga, $gb, $gs, $gfound]

3 [$ga, $gb, $gs, $gfound]


Instruction :out_1:

Instruction :SUB $t2, $gb, 1
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value $gb
Allocate: this.src1Reg $gb
empty spot
5
allocated index 5 allocated value 1
freeing: 4
Freed: $gb in x4
freeing: 5
Freed: 1 in x5
Allocate: this.src1Reg *
empty spot
4

Instruction :MV $gb, $t2
ENSURE: Int reg list
[no, no, no, address, $t2, empty, empty, empty, no]
freeing: 4
Freed: $t2 in x4
Allocate: this.src1Reg *
empty spot
4

Instruction :J loop_1
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$gb
Saving $gb
x5 =empty
x6 =empty
x7 =empty
x8 =no
Instruction List
out_2:
MV $l8, 0
J func_ret_main


HashMap
[$ga, $gb, $gs, $gfound]	
[$ga, $gb, $gs, $gfound]	
0 [$ga, $gb, $gs, $gfound]

1 [$ga, $gb, $gs, $gfound]

2 [$ga, $gb, $gs, $gfound]


Instruction :out_2:

Instruction :MV $l8, 0
Allocate: this.src1Reg null
empty spot
4
allocated index 4 allocated value 0
freeing: 4
Freed: 0 in x4
Allocate: this.src1Reg null
empty spot
4

Instruction :J func_ret_main
Entering reg save
x0 =no
x1 =no
x2 =no
x3 =address
x4 =$l8
x5 =empty
x6 =empty
x7 =empty
x8 =no
FnNode body: PUTS $gs
GETI $ga
MUL $t1, 2, $ga
MV $gb, $t1
loop_1:
BLE $gb, 0, out_2
PUTI $gb
BNE $gb, $ga, out_1
PUTS $gfound
out_1:
SUB $t2, $gb, 1
MV $gb, $t2
J loop_1
out_2:
MV $l8, 0
J func_ret_main

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT
;
func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, 0
SW x4, 0(sp)
ADDI sp, sp, -4
SW x5, 0(sp)
ADDI sp, sp, -4
LA x3, 0x10000000
PUTS x3
GETI x4
LI x5, 2
MUL x5, x5, x4
MV x5, x5
LA x3, 0x20000000
SW x4, 0(x3)
LA x3, 0x20000004
SW x5, 0(x3)
loop_1:
LA x3, 0x20000004
LW x4, 0(x3)
LI x5, 0
BLE x4, x5, out_2
LA x3, 0x20000004
LW x4, 0(x3)
PUTI x4
LA x3, 0x20000000
LW x5, 0(x3)
BNE x4, x5, out_1
LA x3, 0x10000004
PUTS x3
out_1:
LA x3, 0x20000004
LW x4, 0(x3)
LI x5, 1
SUB x4, x4, x5
MV x4, x4
LA x3, 0x20000004
SW x4, 0(x3)
J loop_1
out_2:
LI x4, 0
MV x4, x4
SW x4, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
LW x5, 0(sp)
ADDI sp, sp, 4
LW x4, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET
;


.section .strings
0x10000000 "Enter a number "
0x10000004 "Found!\n"
