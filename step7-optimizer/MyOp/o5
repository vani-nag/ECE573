Found SHADOW adding PTR to INT x
; Symbol table GLOBAL
; name curVal type FLOAT location 0x20000000
; name x type FLOAT location 0x20000004
; name degree type INT location 0x20000008
; Function: VOID swap([PTR to INT, PTR to INT])
; Function: INT main([])

; Symbol table main
; name x type PTR to INT location -4
; name y type FLOAT location -8

; Symbol table swap
; name y type PTR to INT location 12
; name x type PTR to INT location 16
; name tmp type INT location -4

Function main
	Statement list:
		AssignNode:
			VarNode: x
			Malloc: 
				BinaryOpNode: MUL
					IntLitNode: 2
					IntLitNode: 4
		AssignNode:
			PtrDeref: 
				BinaryOpNode: ADD
					VarNode: x
					BinaryOpNode: MUL
						IntLitNode: 0
						IntLitNode: 4
			IntLitNode: 1
		AssignNode:
			PtrDeref: 
				BinaryOpNode: ADD
					VarNode: x
					BinaryOpNode: MUL
						IntLitNode: 1
						IntLitNode: 4
			IntLitNode: 2
		AssignNode:
			VarNode: y
			PtrDeref: 
				BinaryOpNode: ADD
					VarNode: x
					BinaryOpNode: MUL
						IntLitNode: 0
						IntLitNode: 4
		Write: 
			VarNode: y
		Function call swap
			AddrOf: 
				PtrDeref: 
					BinaryOpNode: ADD
						VarNode: x
						BinaryOpNode: MUL
							IntLitNode: 0
							IntLitNode: 4
			AddrOf: 
				PtrDeref: 
					BinaryOpNode: ADD
						VarNode: x
						BinaryOpNode: MUL
							IntLitNode: 1
							IntLitNode: 4
		Write: 
			PtrDeref: 
				BinaryOpNode: ADD
					VarNode: x
					BinaryOpNode: MUL
						IntLitNode: 0
						IntLitNode: 4
		Write: 
			PtrDeref: 
				BinaryOpNode: ADD
					VarNode: x
					BinaryOpNode: MUL
						IntLitNode: 1
						IntLitNode: 4
		Malloc: 
			VarNode: x
		Return: 
			IntLitNode: 0
Function swap
	Statement list:
		AssignNode:
			VarNode: tmp
			PtrDeref: 
				VarNode: x
		AssignNode:
			PtrDeref: 
				VarNode: x
			PtrDeref: 
				VarNode: y
		AssignNode:
			PtrDeref: 
				VarNode: y
			VarNode: tmp
		Return: 
BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t1 Right temp: t2
BinaryOpNode: checkType = INT
Malloc: temp t4
Assign: left type: PTR Right type: INFER
Assign: ptr!
Assign: ;Current temp: null
;IR Code: 
LI t1, 2
LI t2, 4
MUL t3, t1, t2
MALLOC t4, t3
SW t4, -4(fp)

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t5 Right temp: t6
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t8 Right temp: t7
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t9
;IR Code: 
LW t8, -4(fp)
LI t5, 0
LI t6, 4
MUL t7, t5, t6
ADD t9, t8, t7

!var inner type INT
Assign: ;Current temp: null
;IR Code: 
LW t8, -4(fp)
LI t5, 0
LI t6, 4
MUL t7, t5, t6
ADD t9, t8, t7
LI t10, 1
SW t10, 0(t9)

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t11 Right temp: t12
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t14 Right temp: t13
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t15
;IR Code: 
LW t14, -4(fp)
LI t11, 1
LI t12, 4
MUL t13, t11, t12
ADD t15, t14, t13

!var inner type INT
Assign: ;Current temp: null
;IR Code: 
LW t14, -4(fp)
LI t11, 1
LI t12, 4
MUL t13, t11, t12
ADD t15, t14, t13
LI t16, 2
SW t16, 0(t15)

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t17 Right temp: t18
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t20 Right temp: t19
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t21
;IR Code: 
LW t20, -4(fp)
LI t17, 0
LI t18, 4
MUL t19, t17, t18
ADD t21, t20, t19

rvalify lco.type.type: INT
Assign: left type: FLOAT Right type: FLOAT
Assign: ;Current temp: null
;IR Code: 
LW t20, -4(fp)
LI t17, 0
LI t18, 4
MUL t19, t17, t18
ADD t21, t20, t19
LW t22, 0(t21)
IMOVF.S f1, t22
FSW f1, -8(fp)

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t23 Right temp: t24
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t26 Right temp: t25
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t27
;IR Code: 
LW t26, -4(fp)
LI t23, 0
LI t24, 4
MUL t25, t23, t24
ADD t27, t26, t25

AddrOf: Type PTR to INT
AddrOf: ;Current temp: t27
;IR Code: 
LW t26, -4(fp)
LI t23, 0
LI t24, 4
MUL t25, t23, t24
ADD t27, t26, t25

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t28 Right temp: t29
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t31 Right temp: t30
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t32
;IR Code: 
LW t31, -4(fp)
LI t28, 1
LI t29, 4
MUL t30, t28, t29
ADD t32, t31, t30

AddrOf: Type PTR to INT
AddrOf: ;Current temp: t32
;IR Code: 
LW t31, -4(fp)
LI t28, 1
LI t29, 4
MUL t30, t28, t29
ADD t32, t31, t30

BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t33 Right temp: t34
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t36 Right temp: t35
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t37
;IR Code: 
LW t36, -4(fp)
LI t33, 0
LI t34, 4
MUL t35, t33, t34
ADD t37, t36, t35

rvalify lco.type.type: INT
BinaryOpNode left type: INT Right type: INT
BinaryOpNode left temp: t39 Right temp: t40
BinaryOpNode: checkType = INT
BinaryOpNode left type: PTR Right type: INT
BinaryOpNode left temp: t42 Right temp: t41
BinaryOpNode: checkType = PTR
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t43
;IR Code: 
LW t42, -4(fp)
LI t39, 1
LI t40, 4
MUL t41, t39, t40
ADD t43, t42, t41

rvalify lco.type.type: INT
ReturnNode: retExpr's type: INT
PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t1
;IR Code: 
LW t1, 16(fp)

rvalify lco.type.type: INT
Assign: left type: INT Right type: INT
Assign: ;Current temp: null
;IR Code: 
LW t1, 16(fp)
LW t2, 0(t1)
SW t2, -4(fp)

PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t3
;IR Code: 
LW t3, 16(fp)

PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t4
;IR Code: 
LW t4, 12(fp)

rvalify lco.type.type: INT
!var inner type INT
Assign: ;Current temp: null
;IR Code: 
LW t3, 16(fp)
LW t4, 12(fp)
LW t5, 0(t4)
SW t5, 0(t3)

PtrDeref: node's innertype = INT
PtrDeref: Type INT
PtrDeref: ;Current temp: t6
;IR Code: 
LW t6, 12(fp)

!var inner type INT
Assign: ;Current temp: null
;IR Code: 
LW t6, 12(fp)
LW t7, -4(fp)
SW t7, 0(t6)

.section .text
;Current temp: null
;IR Code: 
MV fp, sp
JR func_main
HALT

func_main:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, -8
SW t1, 0(sp)
ADDI sp, sp, -4
SW t2, 0(sp)
ADDI sp, sp, -4
SW t3, 0(sp)
ADDI sp, sp, -4
SW t4, 0(sp)
ADDI sp, sp, -4
SW t5, 0(sp)
ADDI sp, sp, -4
SW t6, 0(sp)
ADDI sp, sp, -4
SW t7, 0(sp)
ADDI sp, sp, -4
SW t8, 0(sp)
ADDI sp, sp, -4
SW t9, 0(sp)
ADDI sp, sp, -4
SW t10, 0(sp)
ADDI sp, sp, -4
SW t11, 0(sp)
ADDI sp, sp, -4
SW t12, 0(sp)
ADDI sp, sp, -4
SW t13, 0(sp)
ADDI sp, sp, -4
SW t14, 0(sp)
ADDI sp, sp, -4
SW t15, 0(sp)
ADDI sp, sp, -4
SW t16, 0(sp)
ADDI sp, sp, -4
SW t17, 0(sp)
ADDI sp, sp, -4
SW t18, 0(sp)
ADDI sp, sp, -4
SW t19, 0(sp)
ADDI sp, sp, -4
SW t20, 0(sp)
ADDI sp, sp, -4
SW t21, 0(sp)
ADDI sp, sp, -4
SW t22, 0(sp)
ADDI sp, sp, -4
SW t23, 0(sp)
ADDI sp, sp, -4
SW t24, 0(sp)
ADDI sp, sp, -4
SW t25, 0(sp)
ADDI sp, sp, -4
SW t26, 0(sp)
ADDI sp, sp, -4
SW t27, 0(sp)
ADDI sp, sp, -4
SW t28, 0(sp)
ADDI sp, sp, -4
SW t29, 0(sp)
ADDI sp, sp, -4
SW t30, 0(sp)
ADDI sp, sp, -4
SW t31, 0(sp)
ADDI sp, sp, -4
SW t32, 0(sp)
ADDI sp, sp, -4
SW t33, 0(sp)
ADDI sp, sp, -4
SW t34, 0(sp)
ADDI sp, sp, -4
SW t35, 0(sp)
ADDI sp, sp, -4
SW t36, 0(sp)
ADDI sp, sp, -4
SW t37, 0(sp)
ADDI sp, sp, -4
SW t38, 0(sp)
ADDI sp, sp, -4
SW t39, 0(sp)
ADDI sp, sp, -4
SW t40, 0(sp)
ADDI sp, sp, -4
SW t41, 0(sp)
ADDI sp, sp, -4
SW t42, 0(sp)
ADDI sp, sp, -4
SW t43, 0(sp)
ADDI sp, sp, -4
SW t44, 0(sp)
ADDI sp, sp, -4
SW t45, 0(sp)
ADDI sp, sp, -4
SW t46, 0(sp)
ADDI sp, sp, -4
FSW f1, 0(sp)
ADDI sp, sp, -4
FSW f2, 0(sp)
ADDI sp, sp, -4
LI t1, 2
LI t2, 4
MUL t3, t1, t2
MALLOC t4, t3
SW t4, -4(fp)
LW t8, -4(fp)
LI t5, 0
LI t6, 4
MUL t7, t5, t6
ADD t9, t8, t7
LI t10, 1
SW t10, 0(t9)
LW t14, -4(fp)
LI t11, 1
LI t12, 4
MUL t13, t11, t12
ADD t15, t14, t13
LI t16, 2
SW t16, 0(t15)
LW t20, -4(fp)
LI t17, 0
LI t18, 4
MUL t19, t17, t18
ADD t21, t20, t19
LW t22, 0(t21)
IMOVF.S f1, t22
FSW f1, -8(fp)
FLW f2, -8(fp)
PUTF f2
LW t26, -4(fp)
LI t23, 0
LI t24, 4
MUL t25, t23, t24
ADD t27, t26, t25
SW t27, 0(sp)
ADDI sp, sp, -4
LW t31, -4(fp)
LI t28, 1
LI t29, 4
MUL t30, t28, t29
ADD t32, t31, t30
SW t32, 0(sp)
ADDI sp, sp, -4
ADDI sp, sp, -4
SW ra, 0(sp)
ADDI sp, sp, -4
JR func_swap
ADDI sp, sp, 4
LW ra, 0(sp)
ADDI sp, sp, 4
ADDI sp, sp, 8
LW t36, -4(fp)
LI t33, 0
LI t34, 4
MUL t35, t33, t34
ADD t37, t36, t35
LW t38, 0(t37)
PUTI t38
LW t42, -4(fp)
LI t39, 1
LI t40, 4
MUL t41, t39, t40
ADD t43, t42, t41
LW t44, 0(t43)
PUTI t44
LW t45, -4(fp)
FREE t45
LI t46, 0
SW t46, 8(fp)
J func_ret_main
func_ret_main:
ADDI sp, sp, 4
FLW f2, 0(sp)
ADDI sp, sp, 4
FLW f1, 0(sp)
ADDI sp, sp, 4
LW t46, 0(sp)
ADDI sp, sp, 4
LW t45, 0(sp)
ADDI sp, sp, 4
LW t44, 0(sp)
ADDI sp, sp, 4
LW t43, 0(sp)
ADDI sp, sp, 4
LW t42, 0(sp)
ADDI sp, sp, 4
LW t41, 0(sp)
ADDI sp, sp, 4
LW t40, 0(sp)
ADDI sp, sp, 4
LW t39, 0(sp)
ADDI sp, sp, 4
LW t38, 0(sp)
ADDI sp, sp, 4
LW t37, 0(sp)
ADDI sp, sp, 4
LW t36, 0(sp)
ADDI sp, sp, 4
LW t35, 0(sp)
ADDI sp, sp, 4
LW t34, 0(sp)
ADDI sp, sp, 4
LW t33, 0(sp)
ADDI sp, sp, 4
LW t32, 0(sp)
ADDI sp, sp, 4
LW t31, 0(sp)
ADDI sp, sp, 4
LW t30, 0(sp)
ADDI sp, sp, 4
LW t29, 0(sp)
ADDI sp, sp, 4
LW t28, 0(sp)
ADDI sp, sp, 4
LW t27, 0(sp)
ADDI sp, sp, 4
LW t26, 0(sp)
ADDI sp, sp, 4
LW t25, 0(sp)
ADDI sp, sp, 4
LW t24, 0(sp)
ADDI sp, sp, 4
LW t23, 0(sp)
ADDI sp, sp, 4
LW t22, 0(sp)
ADDI sp, sp, 4
LW t21, 0(sp)
ADDI sp, sp, 4
LW t20, 0(sp)
ADDI sp, sp, 4
LW t19, 0(sp)
ADDI sp, sp, 4
LW t18, 0(sp)
ADDI sp, sp, 4
LW t17, 0(sp)
ADDI sp, sp, 4
LW t16, 0(sp)
ADDI sp, sp, 4
LW t15, 0(sp)
ADDI sp, sp, 4
LW t14, 0(sp)
ADDI sp, sp, 4
LW t13, 0(sp)
ADDI sp, sp, 4
LW t12, 0(sp)
ADDI sp, sp, 4
LW t11, 0(sp)
ADDI sp, sp, 4
LW t10, 0(sp)
ADDI sp, sp, 4
LW t9, 0(sp)
ADDI sp, sp, 4
LW t8, 0(sp)
ADDI sp, sp, 4
LW t7, 0(sp)
ADDI sp, sp, 4
LW t6, 0(sp)
ADDI sp, sp, 4
LW t5, 0(sp)
ADDI sp, sp, 4
LW t4, 0(sp)
ADDI sp, sp, 4
LW t3, 0(sp)
ADDI sp, sp, 4
LW t2, 0(sp)
ADDI sp, sp, 4
LW t1, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET

func_swap:
SW fp, 0(sp)
MV fp, sp
ADDI sp, sp, -4
ADDI sp, sp, -4
SW t1, 0(sp)
ADDI sp, sp, -4
SW t2, 0(sp)
ADDI sp, sp, -4
SW t3, 0(sp)
ADDI sp, sp, -4
SW t4, 0(sp)
ADDI sp, sp, -4
SW t5, 0(sp)
ADDI sp, sp, -4
SW t6, 0(sp)
ADDI sp, sp, -4
SW t7, 0(sp)
ADDI sp, sp, -4
LW t1, 16(fp)
LW t2, 0(t1)
SW t2, -4(fp)
LW t3, 16(fp)
LW t4, 12(fp)
LW t5, 0(t4)
SW t5, 0(t3)
LW t6, 12(fp)
LW t7, -4(fp)
SW t7, 0(t6)
func_ret_swap:
ADDI sp, sp, 4
LW t7, 0(sp)
ADDI sp, sp, 4
LW t6, 0(sp)
ADDI sp, sp, 4
LW t5, 0(sp)
ADDI sp, sp, 4
LW t4, 0(sp)
ADDI sp, sp, 4
LW t3, 0(sp)
ADDI sp, sp, 4
LW t2, 0(sp)
ADDI sp, sp, 4
LW t1, 0(sp)
MV sp, fp
LW fp, 0(fp)
RET



.section .strings
